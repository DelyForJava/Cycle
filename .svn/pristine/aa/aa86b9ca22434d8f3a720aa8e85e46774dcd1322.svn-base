#define USE_MP2
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using PathologicalGames;
using HedgehogTeam.EasyTouch;
using odao.scmahjong;
using MP;

public class MahjongGame : GameMode
{
	MahjongPlayer _self;
	MahjongPlayer _left;
	MahjongPlayer _front;
	MahjongPlayer _right;
	public MahjongPlayer Self { 
		get { return _self; }
		set { _self = value; }
	}

	List<MahjongPlayer> _players;
	MahjongPlayer[] _playPlayers;   //index 0 is dealer later is right side

	Transform _slot;
	Vector3 _slotOriginal;
	MahjongPile _pile;

	//userid,player
	Dictionary<uint, MahjongPlayer> _userInfo = new Dictionary<uint, MahjongPlayer>();

	public SpawnPool poolMahjongRes;

	private int _dealerIndex = 0;
	public int DealerIndex {
		set { _dealerIndex = value; } 
		get { return _dealerIndex; }
	}
	// -1 unknown state
	// 0 start shuffle state
	// 1 shuffle done state
	public int _shuffle_initpocket_state = -1;
	public bool GameInitDone { get { return _shuffle_initpocket_state > 0; } }

	void Awake()
	{
	}

	void Start()
	{
		GameMessage.SendCardReqDef data = new GameMessage.SendCardReqDef ();
		data.cCard = 9;
		byte[] msg = XConvert.ConvertToByte(data);
		Debug.Log ("===============" + msg.Length);
	}

	public override bool Enter ()
	{
		_shuffle_initpocket_state = -1;

		poolMahjongRes = PoolManager.Pools ["mahjongres"];

		_pile = gameObject.AddComponent<MahjongPile> ();

		_slot = GameObject.Find ("slot").transform;
		_slotOriginal = _slot.transform.position;

		var go = new GameObject ("self");
		_self = go.AddComponent<MahjongUserPlayer> ();
		_self.Proxy = GameClient.Instance.MahjongGamePlayer;
		go = new GameObject ("left");
		_left = go.AddComponent<MahjongPlayer> ();
		go = new GameObject ("front");
		_front = go.AddComponent<MahjongPlayer> ();
		go = new GameObject ("right");
		_right = go.AddComponent<MahjongPlayer> ();

		//_self.ResPool = poolMahjongRes;
		//_left.ResPool = poolMahjongRes;
		//_front.ResPool = poolMahjongRes;
		//_right.ResPool = poolMahjongRes;

		_players = new List<MahjongPlayer> ();
		_players.Add (_self);
		_players.Add (_right);
		_players.Add (_front);
		_players.Add (_left);
		/*
		if (GamePlayer._PlayedList != null) {
			GamePlayer._PlayedList.Clear ();
		}
		*/
		go = GameObject.Find ("MyShowPocketLocator");
		go.GetComponent<MeshRenderer>().enabled=false;
		_self.MyShowPocketLocator = go.transform;
		go = GameObject.Find("MyPocketLocator");
		go.GetComponent<MeshRenderer>().enabled=false;

		string[][] locators = new string[4][] {
			new string[]{ "mahjong", "MyPlayLocator", "MyStackLocator", "MyComboLocator", "MyWinLocator", "MyExchangeLocator" },
			new string[]{ "RightPocketLocator", "RightPlayLocator", "RightStackLocator", "RightComboLocator", "RightWinLocator", "RightExchangeLocator" },
			new string[]{ "FrontPocketLocator", "FrontPlayLocator", "FrontStackLocator", "FrontComboLocator", "FrontWinLocator", "FrontExchangeLocator" },
			new string[]{ "LeftPocketLocator", "LeftPlayLocator", "LeftStackLocator", "LeftComboLocator", "LeftWinLocator", "LeftExchangeLocator" },
		};

		Vector3[] direction = new Vector3[]{ Vector3.right, Vector3.forward, Vector3.left, -Vector3.forward };
		for (int i = 0; i < 4; ++i) {
			_players [i].InitLocator (locators [i]);
			_players [i].InitDirection (direction [i]);
		}

		ArrangePlayer (_self.Proxy.Index, 4);

		// set user pick up pai camera
		//go = GameObject.Find("OCamera169");
		//EasyTouch.AddCamera (go.GetComponent<Camera>());

		//registerOperationTable ();

		//OnRefresh ();

		return true;
	}

	public override void Leave () {

	}

	public void ResetSpawnPool()
	{
		//Debug.Log ("ResetSpawnPool " + poolMahjongRes);
		//poolMahjongRes.ResetAllSpawned (false, poolMahjongRes.transform);
		poolMahjongRes.DespawnAll (poolMahjongRes.transform);
	}

	public void Reset()
	{
		ResetSpawnPool ();
		for (int i = 0; i < _playPlayers.Length; ++i) {
			_playPlayers [i].Reset ();
		}
		_dealerIndex = 0;
		_shuffle_initpocket_state = -1;
		//_settlementRound = 0;
	}

	public void StartRun()
	{
		StartCoroutine (shuffleAndInitPocket ());
	}

	/*
	public override void OnRefresh()
	{
		int totalIndex = 4;

		ArrangePlayer (0, 4);

		//System.DateTime.Now.ToString ("HH:mm")
	}
	*/
	public void ResetDealerInfo(uint dealerUserID)
	{		
		_dealerIndex = GetPlayerIndex(dealerUserID);
	}

	public int GetPlayerIndex(uint uid)
	{
		return 0;
	}

	public int GetSelfIndex(int uid)
	{
		return 0;
	}

    public MahjongPlayer GetPlayer(int index)
    {
        return _playPlayers[index];
    }

	public void ArrangePlayer(int s, int num)
	{
		Debug.Log ("self index is " + s);
		int sr, srr, srrr = 0;
		_playPlayers = new MahjongPlayer[num];

		if (num == 4) {
			sr = (s + 1) % 4;
			srr = (s + 2) % 4;
			srrr = (s + 3) % 4;
			_playPlayers [s] = _self;
			_self.Proxy.Index = s;
			_playPlayers [sr] = _right;
			_right.Proxy.Index = sr;
			_playPlayers [srr] = _front;
			_front.Proxy.Index = srr;
			_playPlayers [srrr] = _left;
			_left.Proxy.Index = srrr;
		} else if (num == 3) {
			sr = (s + 1) % 3;
			srr = (s + 2) % 3;
			_playPlayers [s] = _self;
			_self.Proxy.Index = s;
			_playPlayers [sr] = _right;
			_right.Proxy.Index = sr;
			_playPlayers [srr] = _left;
			_left.Proxy.Index = srr;
		} 
		else if (num == 2) {
			sr = (s + 1) % 2;
			_playPlayers [s] = _self;
			_self.Proxy.Index = s;
			_playPlayers [sr] = _front;
			_front.Proxy.Index = sr;
		}
	}

	//deprecated later for lua
	IEnumerator shuffleAndInitPocket(/*GameInitPush? gip*/)
	{
		Debug.Log ("!!!!!!!!!!!!!!!!!!!!!shuffleAndInitPocket");
		int a = 3;//gip.Value.Dice (0);
		int b = 5;//gip.Value.Dice (1);

		_shuffle_initpocket_state = 0;

		//UIControllerGame.Instance.SetPaiRestInfo (_wall.Count);
		//UIControllerGame.Instance.RefreshPaiRestInfo ();

		Transform dice = poolMahjongRes.Spawn ("DiceGroup");

		ActionBase act = MoveBy.Create (1f, Vector3.down * MahjongTile.Height * 2);
		ActionManager.Instance.RunAction (_slot.gameObject, act);
		yield return new WaitForSeconds (1f);

		for (int i = 0; i < _playPlayers.Length; ++i) {
			_players [i] = _playPlayers [i];
		}

		//hard code
		if (_playPlayers [_dealerIndex] == _self) {
			for (int i = 0; i < _playPlayers.Length; ++i) {
				if (_playPlayers [i] != _self) {
					for (int j = 0; j < 13; ++j) {
						_playPlayers [i].Proxy.PocketList.Add (TileDef.Create ());
					}
				}
			}
		} else {
			for (int i = 0; i < _playPlayers.Length; ++i) {
				if (_playPlayers [i] != _self) {
					if (i == _dealerIndex) {
						for (int j = 0; j < 14; ++j) {
							_playPlayers [j].Proxy.PocketList.Add (TileDef.Create ());
						}
					} else {
						for (int j = 0; j < 13; ++j) {
							_playPlayers [j].Proxy.PocketList.Add (TileDef.Create ());
						}
					}
				}
			}
		}
		if (_playPlayers.Length == 3) {
			if (_players [0] == _self) {
				_players [3] = _players [2];
				_players [2] = _front;
			} else if (_players [1] == _self) {
				_players [3] = _front;
			} else if (_players [2] == _self) {
				_players [0] = _right;
				_players [1] = _front;
				_players [2] = _left;
				_players [3] = _self;
			}
		}

		//dealer and opposite dealer are 14 tons, others are 13tons
		_pile.RebuildStack (a, b, 108, 0, 0);
		int offset = _self.SetupStack (_pile, 0, 14 * 2);
		offset += _right.SetupStack (_pile, offset, 13 * 2);
		offset += _front.SetupStack (_pile, offset, 14 * 2);
		_left.SetupStack (_pile, offset, 13 * 2);

		act = MoveTo.Create (1f, _slotOriginal);
		ActionManager.Instance.RunAction (_slot.gameObject, act);

		yield return new WaitForSeconds (1f);

		// dice sound
		//AudioManager.Instance.PlaySound (AudioManager.Instance.Tou_Zi);
		DiceController.Instance.ThrowDice (a, b);

		Debug.Log ("******" + DiceController.Instance.DiceDone);

		yield return new WaitUntil (() => DiceController.Instance.DiceDone == true);

		Debug.Log ("Dice -> " + a + "," + b);

		for (int i = 0; i < 4; ++i) {
			_playPlayers [i].InitDraw (i==_dealerIndex);
		}

		//TableController.Instance.SetCurrentPlayer (GetPlayerDisplayIndex (_playPlayers [0]));

		// despawn dice
		poolMahjongRes.Despawn (dice, poolMahjongRes.transform);

		for (int i = 0; i < 4; ++i) {
			yield return new WaitUntil (() => _playPlayers [i].InitDrawFinished == true);
		}

		_shuffle_initpocket_state = 1;

		//UIControllerGame.Instance.OpenRefreshButton ();

		Debug.Log ("@shuffleAndInitPocket");
	}

	float _beatTime = 0f;
	public override void Tick()
	{
		_beatTime += Time.deltaTime;
		if (_beatTime > 3f) {
			if (_self.Proxy != null && _self.Proxy is odao.scmahjong.NetworkPlayer) {
				((odao.scmahjong.NetworkPlayer)_self.Proxy).HeartBeat ();
			}
			_beatTime = 0f;
		}

		if (_shuffle_initpocket_state <= 0)
			return;
	}

	#region GamePlay
	public void PlaceExchangeMahjongTile(int index, int num)
	{
	}

	public void ReBuildStack(int a, int b, int count, int drawFront, int drawBehind)
	{
		//dealer and opposite dealer are 14 tons, others are 13tons
		_pile.RebuildStack (a, b, count, 0, 0);
		int offset = _self.SetupStack (_pile, 0, 14 * 2);
		offset += _right.SetupStack (_pile, offset, 13 * 2);
		offset += _front.SetupStack (_pile, offset, 14 * 2);
		_left.SetupStack (_pile, offset, 13 * 2);
	}

	public void SetPocketCount(int index, int num)
	{
		MahjongPlayer player = _playPlayers [index];
		if (player != _self) {
			if (player.Proxy.PocketList.Count > num) {
				int count = player.Proxy.PocketList.Count - num;
				player.Proxy.RemovePocketList (count);
			} else if (player.Proxy.PocketList.Count < num) {
				for (int i = 0; i < (num - player.Proxy.PocketList.Count); ++i) {
					player.Proxy.PocketList.Add (TileDef.Create ());
				}
			}
		}
	}

	public void SetPlayList(int index, List<TileDef> list)
	{
		MahjongPlayer player = _playPlayers [index];
		player.Proxy.PlayList = list;
	}

	public void UpdatePlayList()
	{
		for (int i = 0; i < _playPlayers.Length; ++i) {
			_playPlayers [i].ResetPlayList ();
		}
	}

	public void UpdateOtherPocketList()
	{
		_right.ResetPocketList ();
		_front.ResetPocketList ();
		_left.ResetPocketList ();
	}

	public void UpdateSelfPocketList(bool lastGap)
	{
		_self.ResetPocketList (lastGap);
	}

	public void UpdatePocketList()
	{
		for (int i = 0; i < _playPlayers.Length; ++i) {
			_playPlayers [i].ResetPocketList (_playPlayers[i].Proxy.YourTurn);
		}
	}

	public void UpdatePocketList(int index, bool lastGap = false)
	{
		MahjongPlayer player = _playPlayers [index];
		player.ResetPocketList (lastGap);
	}

	public void UpdateComboList()
	{
		for (int i = 0; i < _playPlayers.Length; ++i) {
			_playPlayers [i].ResetComboList ();
		}
	}

	public void SetLackTile(int index, TileDef.Kind k)
	{
		Debug.Log ("SetLackTile---->" + index + ":" + k);
		MahjongPlayer player = _playPlayers [index];
		player.Proxy.LackTileKind = k;
	}

	public void UpdateLackState()
	{
        Debug.Log("**********_sortPocketList3");
		for (int i = 0; i < _playPlayers.Length; ++i) {
			_playPlayers [i].SetLackState ();
		}
	}

	public void AutoPlay(int index, TileDef def, int flag)
	{
		MahjongPlayer player = _playPlayers [index];
		if (player == _self && flag == 0) {
			return;
		}
		bool ok = player.Play (def);
		player.SortPocketListAfterPlay ();
		Debug.Log ("auto play ==================== " + index + "=====================" + player.Proxy.ToString ());
	}

	public void AutoCombo(int index, TileComboDef def, int flag)
	{
		Debug.Log ("auto combo " + index + "     flag:" + flag);
		MahjongPlayer player = _playPlayers [index];
		GameClient.Instance.MG.GetPlayer (def.Index).RemoveLastPlayed ();
		if (player == _self) {
			player.ResetPocketList ();
			player.Combo (def);
			Debug.Log ("after combo===========");
			Debug.Log (player.Proxy.ToString ());
			return;
		}

		switch (def.Combo) {
		case TileDef.ComboType.CHOW:
			break;
		case TileDef.ComboType.PONG:
			player.Proxy.RemovePocketList (2);
			break;
		case TileDef.ComboType.KONG:
			player.Proxy.RemovePocketList (3);
			break;
		case TileDef.ComboType.KONG_DARK:
			player.Proxy.RemovePocketList (4);
			break;
		case TileDef.ComboType.KONG_TURN:
			player.Proxy.RemovePocketList (1);
			break;
		}

		player.ResetPocketList ();
		player.Combo (def);
		Debug.Log ("after combo===========");
		Debug.Log (player.Proxy.ToString ());
	}

	public void Draw(int index, TileDef def)
	{
		_playPlayers[index].Draw(def);
	}

	public void TurnTo(int index)
	{
		for (int i = 0; i < _playPlayers.Length; ++i) {
			_playPlayers [i].Proxy.YourTurn = false;
		}
		//UIDebugViewController.Instance.SetText ("轮到玩家 " + index + " ... ");
		_playPlayers [index].Proxy.YourTurn = true;
	}

	public void ComputerManageFor(int index, int flag)
	{
		_playPlayers [index].Proxy.TrusteeShip = flag;
		if (flag > 0) {
			_playPlayers [index].Proxy.YourTurn = false;
		}
	}

	public void ShowPocketList(int index)
	{
		MahjongPlayer player = _playPlayers [index];
		player.ShowPocketList ();
	}

    public void OnRestoreGameState(GameMessage.GameStateDef info)
    {
        _self.Proxy.PocketList.Clear();
        // total 14
#if USE_MP2
        for (int i = 0; i < info.cHandCards.Count; ++i)
#else
            for (int i = 0; i < info.cHandCards.Length; ++i)
#endif

        {
            if (TileDef.IsValid(info.cHandCards[i]))
            {
                TileDef def = TileDef.Create(info.cHandCards[i]);
                _self.Proxy.PocketList.Add(def);
            }
        }
#if USE_MP2
        //玩家已经出的牌
        //List<List<TileDef>> lists = new List<List<TileDef>>();
        List<TileDef>[] lists = new List<TileDef>[4];
        for (int i = 0; i < GameMessage.TABLE_PLAYER_NUM; ++i)
        {
            lists[i] = new List<TileDef>();
            for (int j = 0; j < info.cSendCards[i].cCards.Count; ++j)
            {
                byte card = info.cSendCards[i].cCards[j];
                lists[i].Add(TileDef.Create(card));
             }
        }
        GameClient.Instance.MG.ArrangePlayer(_self.Proxy.Index, 4);
        GameClient.Instance.MG.ReBuildStack(3, 5, 108, 0, 0);
        for (int i = 0; i < info.cHandCardsNum.Count; ++i)
        {
            GameClient.Instance.MG.SetPocketCount(i, info.cHandCardsNum[i]);
        }
        for (int i = 0; i < GameMessage.TABLE_PLAYER_NUM; ++i)
        {
            GameClient.Instance.MG.SetPlayList(i, lists[i]);
        }
#else
        //玩家已经出的牌
        List<TileDef> list = new List<TileDef>();
        for (int i = 0; i < GameMessage.TABLE_PLAYER_NUM; ++i)
        {
             for (int j = 0; j < 21; ++j)
            {
                 //byte card = info.cSendCards[i * 21 + j];
                byte card = info.cSendCards[i * 21 + j];
                list.Add(TileDef.Create(card));
            }
        }
        GameClient.Instance.MG.ArrangePlayer(_self.Proxy.Index, 4);
        GameClient.Instance.MG.ReBuildStack(3, 5, 108, 0, 0);

        //reset pocket data
        for (int i = 0; i < info.cHandCardsNum.Length; ++i)
        {
            GameClient.Instance.MG.SetPocketCount(i, info.cHandCardsNum[i]);
        }

        for (int i = 0; i < GameMessage.TABLE_PLAYER_NUM; ++i)
        {
            var newList = list.GetRange(i * 21, 21);
            GameClient.Instance.MG.SetPlayList(i, newList);
        }
#endif

		//combo
		for (int i = 0; i < GameMessage.TABLE_PLAYER_NUM; ++i) {
			var comboCards = info.combo[i];
			//for (int j = 0; j < comboCards.list.Count; ++j) {
				//SpecialCardReqDef special = comboCards [j];
				//combo
			//}
		}

        UpdatePlayList();
        UpdatePocketList();
		UpdateComboList ();
		if(GameClient.Instance.SpecialCard > 0 && GameClient.Instance.SpecialType > 0)
		{
			UpdateCombo ();
		}
    }
    #endregion

	#region qmy add
	private void UpdateCombo()
	{
		UIGameComboController.Instance.OpenAllCombos(GameClient.Instance.SpecialType);
	}
	#endregion
}
