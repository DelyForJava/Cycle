local Hall = {}
local self = Hall
self.name = "Hall"
self.transform = nil

self.resReload = nil

local index = 0
local max = 0
self.reloaded = false

local co = coroutine.create(function(index)
	-- for i=0,images.Length-1 do
		self.resReload:SendMessage("OnStepImage",index)
		return coroutine.yield()
	-- end
end)

function Hall.Init(transform)
		self.transform = transform
		self.resReload = StartReload(transform.gameObject)

		local images = self.resReload.images
		max = images.Length-1
end

function Hall.Update()
	if index>max then
		self.reloaded = true
		return
	end
	print("-------------------------------- Hall Update --------------------------------")
	print("I am in the coroutine:"..index)
	coroutine.resume(co,index)
	index = index + 1
end

return Hall


--[[local Model = require 'Hall/HallModel'
local View = require 'Hall/HallView'

local Hall = {}
local self = Hall
self.name = "Hall"

function Hall.Awake()
		USceneManager.LoadSceneAsync( "Scenes/"..self.name,CS.UnityEngine.SceneManagement.LoadSceneMode.Additive)
end

function Hall.Start()
		print("-------------------------------- Hall Start --------------------------------")
end

function Hall.Update()
		-- print("-------------------------------- Hall Update --------------------------------")
		if false==View.loaded then
				View.Update()
		end
end

function Hall.OnDestroy()
		print("-------------------------------- Hall OnDestroy --------------------------------")
end

function Hall.GetLoaded()
		return View.loaded
end

return Hall]]