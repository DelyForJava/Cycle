-- collectgarbage("collect")
-- local count = collectgarbage("count")
-- print("===============before:",count)
local Json = require 'Json'

require 'Global'

local canvas
local hall
local login
local loading
local bar
local barText

local hallScene
local loginScene

local currentScene

local index = 0
local percent = 0
local max = 1

function Awake()
	if true then
		return
	end


	-- print("-------------------------------- Awake:"..BAssetBundleManager.Instance.Version.." --------------------------------")
	-- print("--CSharp Data:"..BUrl.."--")
	-- print("--CSharp Data:"..BChannelId.."--")
	-- print("--CSharp Data:"..BCdn.."--")
	-- local tb = {}
	-- tb.name = "gaga"
	-- tb.level = 1
	-- tb.what ="0.0"
	-- tb.fuck = 2
	-- tb.is = true
	-- tb.this = 3.3

	-- local tbStr = Json.encode(tb)
	-- print("=============== Client Awake :"..tbStr)

	-- local tb2 = Json.decode(tbStr)
	-- local tb2 = Json.decode("Config/netMessage.json")
	-- print("=============== Client Awake2 :"..tb2.name..tb2.level..tb2.what..tb2.fuck..tb2.this)

	canvas = UGameObject.Find("Canvas").transform
	hall = canvas:Find("Hall")
	hallScene = require("Hall/Hall")
	hallScene.Init(hall)
	currentScene = hallScene
	percent = hallScene.index
	max = hallScene.max

	login = canvas:Find("Login")
	loginScene = require("Login/Login")
	loginScene.Init(login)
	percent = percent + loginScene.index
	max = max + loginScene.max

	loading = canvas:Find("Loading")
	bar = loading:Find("Bar"):GetComponent(typeof(UImage))
	barText = loading:Find("Text"):GetComponent(typeof(UText))
end

function Start()
		--print("-------------------------------- Start --------------------------------")



end

function Update()
	if true then
		return
	end
	hallScene.Update()
	loginScene.Update()
	-- print("current index:"..currentScene.index..",max:"..currentScene.max)
	--currentScene.Update()
	percent = loginScene.index + hallScene.index
	local p = (percent + 2)/max
	bar.fillAmount = p
	barText.text = tostring(math.ceil(p*100))
	--loginScene.Update()
	--hallScene.Update()
	if true==hallScene.reloaded then
		if false==loginScene.reloaded then
			currentScene = loginScene
		else
			loading.gameObject:SetActive(false)
		end
	end
end

function OnDestroy()
		-- print("-------------------------------- OnDestroy --------------------------------")

end

-- local loaded = package.loaded
-- for k,v in pairs(loaded) do
-- 	print(k,v)
-- end

-- count = collectgarbage("count")

-- print("===============middle:",count)
-- collectgarbage("collect")
-- count = collectgarbage("count")
-- print("===============after:",count)